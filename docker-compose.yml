version: "3.7"
services:
  chatwoot_app:
    image: chatwoot/chatwoot:v4.5.2
    restart: unless-stopped
    env_file: .env # Carrega variáveis de ambiente do arquivo .env
    command: >
      sh -c "
        echo 'Rails.application.config.active_storage.variant_processor = :mini_magick' > /app/config/initializers/active_storage.rb;
        if [ \"$${AGENT_ONLY_MINE}\" = \"true\" ]; then
          # Monta o arquivo agent_only_mine.rb do host e o injeta no local de initializers do Rails
          # Isso evita problemas de parsing de variáveis de ambiente com conteúdo multi-linha no .env
          printf '%%s' \"$$(cat /app/initializers/agent_only_mine.rb)\" > /app/config/initializers/agent_only_mine.rb;
        fi;
        bundle exec rails s -p 3000 -b 0.0.0.0
      "
    depends_on:
      - postgres
      - redis
    volumes:
      - chatwoot_storage:/app/storage
      - chatwoot_public:/app/public
      - ./app/initializers/agent_only_mine.rb:/app/initializers/agent_only_mine.rb:ro # Monta o arquivo do repositório para o container
    networks:
      - abrangenetnet
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M
      labels:
        - traefik.enable=true
        - traefik.http.routers.chatwoot_app.rule=Host(`${FRONTEND_URL_HOST}`) # Usará o host do FRONTEND_URL do .env
        - traefik.http.routers.chatwoot_app.entrypoints=websecure
        - traefik.http.routers.chatwoot_app.tls.certresolver=letsencryptresolver
        - traefik.http.routers.chatwoot_app.priority=1
        - traefik.http.routers.chatwoot_app.service=chatwoot_app
        - traefik.http.services.chatwoot_app.loadbalancer.server.port=3000
        - traefik.http.services.chatwoot_app.loadbalancer.passHostHeader=true
        - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https
        - traefik.http.routers.chatwoot_app.middlewares=sslheader
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:3000/"]
      interval: 30s
      timeout: 5s
      retries: 5

  chatwoot_sidekiq:
    image: chatwoot/chatwoot:v4.5.2
    restart: unless-stopped
    env_file: .env # Carrega variáveis de ambiente do arquivo .env
    command: bundle exec sidekiq -C config/sidekiq.yml
    depends_on:
      - postgres
      - redis
    volumes:
      - chatwoot_storage:/app/storage
      - chatwoot_public:/app/public
    networks:
      - abrangenetnet
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 1024M

  redis:
    image: redis:latest # Alterado para usar o seu image name preferido
    restart: unless-stopped
    command: ["redis-server","--appendonly","yes","--port","6379"]
    volumes:
      - chatwoot_redis:/data # Usando o volume nomeado 'chatwoot_redis'
    networks:
      - abrangenetnet
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 2048M

  postgres:
    image: pgvector/pgvector:pg16 # Usando a sua imagem pgvector
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pg_data:/var/lib/postgresql/data # Usando um volume nomeado para dados do Postgres
    networks:
      - abrangenetnet
    deploy:
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: "1"
          memory: 2048M # Ajustado para 2GB, valor comum para DB

volumes:
  chatwoot_storage:
    external: true
    name: chatwoot_storage
  chatwoot_public:
    external: true
    name: chatwoot_public
  chatwoot_redis:
    external: true
    name: chatwoot_redis
  pg_data: # Novo volume para o Postgres
    external: true
    name: pg_data # Crie este volume manualmente na VPS: docker volume create pg_data

networks:
  abrangenetnet:
    external: true
    name: abrangenetnet
