name: Deploy Chatwoot

on:
  push:
    branches: [ "main" ] # Aciona o workflow sempre que houver um push para a branch 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest # O runner do GitHub Actions que executará as etapas
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Clona o seu repositório Git

      - name: Configure SSH private key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }} # Usa a chave SSH privada que você configurará nos Secrets

      - name: Ensure APP_DIR exists and clone if first deploy
        run: |
          set -e
          APP_DIR=${{ secrets.APP_DIR }}
          if [ ! -d "$APP_DIR" ]; then
            echo "Diretório da aplicação ($APP_DIR) não existe. Criando e clonando repositório..."
            sudo mkdir -p "$APP_DIR" # Use sudo para criar em /srv
            sudo chown ${SSH_USER}:${SSH_USER} "$APP_DIR" # Garante que o usuário SSH tenha permissão
            git clone https://github.com/${{ github.repository }} "$APP_DIR"
          fi
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
        
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true # Para o script se algum comando falhar
          script: |
            set -euo pipefail # Fail fast
            APP_DIR=${{ secrets.APP_DIR }}
            
            echo "Entrando no diretório da aplicação: $APP_DIR"
            cd "$APP_DIR"

            echo "Atualizando repositório Git no host..."
            git fetch --all
            git reset --hard origin/main
            
            echo "Garantindo permissões para scripts..."
            chmod +x scripts/*.sh

            echo "Executando script de atualização da stack Docker Compose..."
            ./scripts/update_stack.sh

            echo "Executando script de migrações do banco de dados..."
            ./scripts/migrate.sh

            echo "Deploy concluído com sucesso!"
